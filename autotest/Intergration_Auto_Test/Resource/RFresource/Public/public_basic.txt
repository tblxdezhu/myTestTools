*** Settings ***
Resource          public_variables.txt
Library           ../../PythonLib/PublicLib/v2i_tester.py
Library           ../../PythonLib/PublicLib/v2i_events_tester.py
Library           ../../PythonLib/PublicLib/v2i_events_status.py
Library           ../../PythonLib/PublicLib/comparevalue.py
Library           ../../PythonLib/PublicLib/device_components.py
Library           ../../PythonLib/PublicLib/v2i_register_tester.py
Library           ../../PythonLib/PublicLib/utility.py
Library           SSHLibrary
Library           Collections
Library           string
Library           String
Library           OperatingSystem
Library           DateTime
Library           RequestsLibrary
Library           ../../PythonLib/PublicLib/basic_operation.py

*** Keywords ***
v2i Login Server
    [Arguments]    ${pAddress}=@{gDevicesIp}[0]    ${pUser}=@{gDevicesUser}[0]    ${pPassword}=@{gDevicesPasswd}[0]
    log    ${pAddress}
    ${LoginIp}    Set Variable    ${EMPTY}
    log    ${LoginIp}
    Run Keyword If    "${pAddress}" != "${LoginIp}"    Login Server    ${pAddress}    ${pUser}    ${pPassword}
    Run Keyword If    "${pAddress}" != "${LoginIp}"    Set Global Variable    ${LoginIp}    ${pAddress}
    Comment    #get "~" path
    Comment    ${user_path}    Run    cd ~; pwd
    Comment    ${tmp_filefortest}    Run Keyword If    "${address}" == "${Dev_IP}" and "${os_type}" == "OIP"    Set Variable    /home/users/filefortest
    ...    ELSE    Set Variable    ${user_path}/filefortest
    Comment    #set filefortest path
    Comment    Set Global Variable    ${filefortest}    ${tmp_filefortest}
    log    ${pAddress}
    log    ${LoginIp}

Check Probe Start
    [Arguments]    ${pProgressName}    ${pAddress}=@{gDevicesIp}[0]    ${pUser}=@{gDevicesUser}[0]    ${pPassword}=@{gDevicesPasswd}[0]    ${pCmdType}=pstree
    [Tags]    qqwei
    ${command}    Set Variable If    "${pCmdType}"=="pstree"    pstree -p | grep ${pProgressName} | grep -v grep    ps -ef | grep ${pProgressName} | grep -v grep
    log    ${command}
    : FOR    ${index}    IN RANGE    180
    \    sleep    1sec
    \    ${executeResult}    ${stderr}    ${rc}    Execute My Command    ${command}    ${pAddress}
    \    ...    ${pUser}    ${pPassword}
    \    ${findResult}    Find    ${executeResult}    ${pProgressName}
    \    ${resultInt}    Convert To Integer    ${findResult}
    \    Run Keyword If    ${resultInt} > 0    Exit For Loop
    Run keyword If    ${resultInt} < 0    Fail    The service don't start

Check Probe Stop
    [Arguments]    ${pProgressName}    ${pAddress}=@{gDevicesIp}[0]    ${pUser}=@{gDevicesUser}[0]    ${pPassword}=@{gDevicesPasswd}[0]    ${pCmdType}=pstree
    [Tags]    qqwei
    ${command}    Set Variable If    "${pCmdType}"=="pstree"    pstree -p | grep ${pProgressName} | grep -v grep    ps -ef | grep ${pProgressName} | grep -v grep
    : FOR    ${index}    IN RANGE    20
    \    sleep    0.5sec
    \    ${executeResult}    ${stderr}    ${rc}    Execute My Command    ${command}    ${pAddress}
    \    ...    ${pUser}    ${pPassword}
    \    ${findResult}    Find    ${executeResult}    ${pProgressName}
    \    ${rResultInt}    Convert To Integer    ${findResult}
    \    Run Keyword If    ${rResultInt} < 0    Exit For Loop
    Run keyword If    ${rResultInt}> 0    Fail    The service don't stop
    [Return]    ${rResultInt}

Login Server
    [Arguments]    ${pAddress}=@{gDevicesIp}[0]    ${pUser}=@{gDevicesUser}[0]    ${pPassword}=@{gDevicesPasswd}[0]
    [Tags]    qqwei
    Close All Connections
    ${segment}    Get Network Segment    ${pAddress}
    ${port}    Set Variable If    "${segment}" == "6"    2222    ${gSshPort}
    Open Connection    ${pAddress}    None    ${port}    5 hours
    Login    ${pUser}    ${pPassword}

Get Network Segment
    [Arguments]    ${pAddress}
    ${result}    Run    ping -c 1 ${pAddress}
    Comment    log    ${result}
    ${left_split}    Split    ${result}    (
    Comment    log    ${left_split[1]}
    ${right_split}    Split    ${left_split[1]}    )
    Comment    log    ${right_split[0]}
    ${point}    Split    ${right_split[0]}    .
    Comment    log    ${point[2]}
    ${rSegment}    Set Variable    ${point[2]}
    [Return]    ${rSegment}

Get From Tuples
    [Arguments]    ${pTuple}    ${pIndex}
    [Documentation]    | Description | change tuple to list ,and Returns the value specified with an index from list |
    ...    | input parameters |
    ...    | ${pTuple} | tuple |
    ...    | ${pIndex} | the element index |
    [Tags]    siqi.zeng
    ${restltList}    convert to list    ${pTuple}
    ${rListValue}    get from list    ${restltList}    ${pIndex}
    [Return]    ${rListValue}

Check Probe Status
    [Arguments]    ${pProgressName}    ${pAddress}=@{gDevicesIp}[0]    ${pUser}=@{gDevicesUser}[0]    ${pPassword}=@{gDevicesPasswd}[0]    ${pCmdType}=pstree
    [Tags]    qqwei
    ${command}    Set Variable If    "${pCmdType}"=="pstree"    pstree -p | grep ${pProgressName} | grep -v grep    ps -ef | grep ${pProgressName} | grep -v grep
    : FOR    ${index}    IN RANGE    20
    \    sleep    0.5sec
    \    ${executeResult}    ${stderr}    ${rc}    Execute My Command    ${command}    ${pAddress}
    \    ...    ${pUser}    ${pPassword}
    \    ${findResult}    Find    ${executeResult}    ${pProgressName}
    \    ${rResultInt}    Convert To Integer    ${findResult}
    \    Run Keyword If    ${rResultInt} < 0    Exit For Loop
    [Return]    ${rResultInt}

Mount Resource
    [Arguments]    ${pMountLocalFolder}=${gMountLocalFolder}
    [Documentation]    | Description | mount resource server |
    ...    | input parameters |
    ...    | ${pResourceIp} | default:${gLocalResourcesIp} |
    ...    | ${pResourceUserName} | default:${gLocalResourcesUser} |
    ...    | ${pResourcePassword} | default:{gLocalResourcesPassWord} |
    ...    | ${pRemotePath} | default:${gMountRemoteFolder} |
    ...    | ${pMountLocalFolder} | default:${gMountLocalFolder} |
    [Tags]    siqi.zeng
    ${resourceIp}=    set variable if    "${EnvironmentType}"=="local"    ${gLocalResourcesIp}    ${gApacheIp}
    ${remotePath}=    set variable if    "${EnvironmentType}"=="local"    ${gMountLoRemoteFolder}    ${gMountRemoteFolder}
    ${resourceUserName}=    set variable if    "${EnvironmentType}"=="local"    ${gLocalResourcesUser}    ${gApacheUser}
    ${resourcePassword}    set variable if    "${EnvironmentType}"=="local"    ${gLocalResourcesPassWord}    ${gApachePassword}
    Run Keyword And Ignore Error    execute command    mkdir ${pMountLocalFolder}
    Run Keyword And Ignore Error    execute command    sudo mount -t cifs //${resourceIp}${remotePath} ${pMountLocalFolder} -o username=${resourceUserName},password=${resourcePassword}

Get Specified Time
    [Arguments]    ${pNumber}
    [Documentation]    | Description | get the current time with format of 2018-03-23-15-52 |
    [Tags]    qin.hu
    ${time}    Execute Command    date "+%Y-%m-%d-%H-%M-%S"|cut -b 1-${pNumber}
    [Return]    ${time}

Execute Command with Return Check
    [Arguments]    ${command}
    [Documentation]    | Description | check the execut command with return code 0 |
    [Tags]    qin.hu
    ${r}    Execute Command    ${command}    true    true    true
    Should Be Equal As Integers    ${r[2]}    0

Parse Device Status
    [Arguments]    ${pDeviceId}
    [Documentation]    | Description | parse device status |
    ...    | input parameters |
    ...    | ${pDeviceId} | a device id |
    [Tags]    siqi.zeng
    ${stdout}    ${rc}    execute command    curl ${gDbApiUrl}/devices/${pDeviceId}    return_stdout=True    return_rc=True
    run keyword and ignore error    should be equal as integers    ${rc}    0
    ${stdoutDict}=    to json    ${stdout}
    ${dataList}=    Get From Dictionary    ${stdoutDict}    data
    ${dataDict}=    Get From List    ${dataList}    0
    ${rStatus}=    Get From Dictionary    ${dataDict}    status
    [Return]    ${rStatus}

Get API
    [Arguments]    ${pAPIUrl}    ${pAPIUri}
    [Documentation]    | Description | call get api and get return content |
    ...    | input |
    ...    | ${pAPIurl} | api url |
    ...    | ${pAPIUri} | uri that append to ${pAPIurl} |
    ...    | output |
    ...    | ${rResponseCont} | api return content |
    [Tags]    siqi.zeng
    create session    alias    ${pAPIUrl}
    #    call api to get data
    ${rResponse}    get request    alias    ${pAPIUri}
    log    ${rResponse.status_code}
    log    ${rResponse.content}
    ${rResponseCont}    set variable    ${rResponse.content}
    [Return]    ${rResponseCont}

Revert Database
    Execute Command with Return Check    ${gToolPath}/db/clear_db_data/allDB_clear.sh >/tmp/log.tx
