*** Settings ***
Resource          public_basic.txt

*** Keywords ***
Execute My Command
    [Arguments]    ${pCommand}    ${pAddress}=@{gDevicesIp}[0]    ${pUser}=@{gDevicesUser}[0]    ${pPassword}=@{gDevicesPasswd}[0]
    v2i Login Server    ${pAddress}    ${pUser}    ${pPassword}
    ${cmdSplit}    Split String    ${pCommand}    ${SPACE}
    ${cmdType}    Set Variable    ${cmdSplit[0]}
    ${cmd}    Run Keyword If    "${cmdType}" == "rm"    Set Variable    sudo ${pCommand}
    ...    ELSE    Set Variable    ${pCommand}
    ${rReturn}    ${rStderr}    ${rRC}    Execute Command    ${cmd}    True    True
    ...    True
    [Return]    ${rReturn}    ${rStderr}    ${rRC}

Stop Probe
    [Arguments]    ${pAddress}=@{gDevicesIp}[0]    ${pUser}=@{gDevicesUser}[0]    ${pPassword}=@{gDevicesPasswd}[0]
    ${myCommand}    Set Variable    sudo service road_probe stop
    Execute My Command    ${myCommand}    ${pAddress}    ${pUser}    ${pPassword}
    Check Probe Stop    sync-agent    ${pAddress}    ${pUser}    ${pPassword}
    sleep    5s

Restart Probe
    [Arguments]    ${pAddress}=@{gDevicesIp}[0]    ${pUser}=@{gDevicesUser}[0]    ${pPassword}=@{gDevicesPasswd}[0]
    ${mycommand1}    Set Variable    sudo service road_probe restart
    Execute My Command    ${mycommand1}    ${pAddress}    ${pUser}    ${pPassword}
    Check Probe Start    sync-agent    ${pAddress}    ${pUser}    ${pPassword}
    sleep    5s
    Comment    Execute My Command    ls -l /tmp/roadDB/    ${pAddress}    ${pUser}    ${pPassword}
    Comment    Execute My Command    ls -l /tmp/etc/roaddb_agent/    ${pAddress}    ${pUser}    ${pPassword}
    Comment    Execute My Command    sudo chmod -R 777 /tmp/roadDB/    ${pAddress}    ${pUser}    ${pPassword}
    Comment    Execute My Command    sudo chmod -R 777 /tmp/etc/roaddb_agent/    ${pAddress}    ${pUser}    ${pPassword}
    Comment    Execute My Command    ls -l /tmp/roadDB/    ${pAddress}    ${pUser}    ${pPassword}
    Comment    Execute My Command    ls -l /tmp/etc/roaddb_agent/    ${pAddress}    ${pUser}    ${pPassword}

Stop Cloud
    ${mycommand1}    Set Variable    sudo stop mosquitto
    Execute My Command    ${mycommand1}    ${gCloudHostname}    ${gCloudUser}    ${gCloudPasswd}
    sleep    5s

Restart Cloud
    ${mycommand1}    Set Variable    sudo service road_cloud restart
    ${return}    Execute My Command    ${mycommand1}    ${gCloudHostname}    ${gCloudUser}    ${gCloudPasswd}
    sleep    5s

Execute Mysql Command
    [Arguments]    ${pCommand}    ${pAddress}    ${pUser}    ${pPassword}
    [Documentation]    ${pCommand} | The mysql command |
    ...    | ${pAddress} | The server IP of which to excute this command |
    ...    | ${pUser} | The user of server |
    ...    | ${pPassword} | The password of server |
    ...    | ${pRC} | The command return code which your except |
    v2i Login Server    ${pAddress}    ${pUser}    ${pPassword}
    ${rReturn}    ${rStderr}    ${rRC}    Execute Command    ${pCommand}    True    True
    ...    True
    [Return]    ${rReturn}    ${rStderr}    ${rRC}

Restart Server
    ${commandRestart}    Set Variable    sudo service road_server restart >/tmp/testforstart.log
    ${return}    Execute My Command    ${commandRestart}    @{gBackendsIp}[0]    @{gBackendsUser}[0]    @{gBackendsPasswd}[0]

Clear Backend Environment
    [Documentation]    | Description | 1.clear environment |
    [Tags]    siqi.zeng
    [Timeout]
    #    clear
    ${rc}    execute command    ${gToolPath}/db/clear_db_data/allDB_clear.sh >/tmp/log.txt    return_stdout=False    return_rc=True
    Should Be Equal As Integers    ${rc}    0    clear db failed!
    ${rc}    execute command    sudo rm -rf ${gUploadPath}    return_stdout=False    return_rc=True
    Should Be Equal As Integers    ${rc}    0    clear uploads folder failed!
    run keyword and ignore error    execute command    rm -rf ${gWorkFlowManagerPath}/*
    ${rc}    execute command    rm -rf ${gWorkPath}    return_stdout=False    return_rc=True
    Should Be Equal As Integers    ${rc}    0    clear work path failed!
    run keyword and ignore error    execute command    rm -rf ${gRTVPath}/*
    run keyword and ignore error    execute command    rm -rf ${gFWLogPath}/*
    run keyword and ignore error    execute command    cp /dev/null ${gServerLogPath}/WorkflowManager.log
    run keyword and ignore error    execute command    cp /dev/null ${gServerLogPath}/DataProcessor.log

Clear Environment and Trigger Snippets
    [Arguments]    ${pSourceSnippetFolder}
    [Documentation]    | Description | 1.copy snipppet to file storage folder 2.clear environment 3.trigger snippets 4.start road_server service |
    ...    | input parameters |
    ...    | ${pSourceSnippetFolder} | snippet source path |
    [Tags]    siqi.zeng
    #    login backend
    #clear environment
    Clear Backend Environment
    #    start service
    Run Keyword And ignore error    execute command    sudo service road_server start
    #prepare snippets
    ${rc}    execute command    mkdir -p ${gUploadPath}    return_stdout=False    return_rc=True
    Should Be Equal As Integers    ${rc}    0    creat upload folder failed!
    ${rc}    execute command    cp -r ${pSourceSnippetFolder}/* ${gUploadPath}    return_stdout=False    return_rc=True
    Should Be Equal As Integers    ${rc}    0    copy snippets failed!
    ${sSnippetList}    SSHLibrary.list files in directory    ${gUploadPath}
    set suite variable    ${sSnippetList}
    ${sSnippetCount}    execute command    ls ${gUploadPath}|wc -l
    set suite variable    ${sSnippetCount}
    ${stdout}    ${rc}    execute command    java -jar ${gJavaToolPath}/offline-tool-stitching-trigger.jar    return_stdout=True    return_rc=True
    Should Be Equal As Integers    ${rc}    0    trigger snippets failed!
    should contain    ${stdout}    countSuccess = ${sSnippetCount}    trigger snippets failed!
    #    wait and check whether trigger snippets successful
    : FOR    ${i}    IN RANGE    50
    \    ${count}    Get Snippet Count of T1    /history/snippets
    \    Exit For Loop If    '${count}'=='${sSnippetCount}'
    \    sleep    2
    Should Be Equal as integers    ${count}    ${sSnippetCount}    trigger snippets failed!

Get Snippet Count of T1
    [Arguments]    ${pUri}    ${pDbApiUrl}=${gDbApiUrl}
    [Documentation]    | Description | get snippets count from db,you can specify a type of snippet, return a snippets count |
    ...    | input parameters |
    ...    | ${pUri} | api uri |
    ...    | ${pDbApiUrl} | default:${gDbApiUrl} |
    [Tags]    siqi.zeng
    create session    backend    ${pDbApiUrl}
    ${response}    get request    backend    ${pUri}
    should be equal as integers    ${response.status_code}    200
    ${responseDirectory}    to json    ${response.content}
    ${opsDirectory}    Get From dictionary    ${responseDirectory}    ops
    ${snippetCount}    Get From Dictionary    ${opsDirectory}    total
    [Return]    ${snippetCount}

Get Data of T2
    [Arguments]    ${pUri}    ${pDbApiUrl}=${gDbApiUrl}
    [Documentation]    | Description | get waiting handle snippets from history.processing_report,you must give the endpointid |
    ...    | input parameters |
    ...    | ${pUri} | api uri |
    ...    | ${pDbApiUrl} | default:${gDbApiUrl} |
    [Tags]    siqi.zeng
    create session    backend    ${pDbApiUrl}
    ${response}    get request    backend    ${pUri}
    should be equal as integers    ${response.status_code}    200
    ${responseDirectory}    to json    ${response.content}
    ${dataList}    Get From dictionary    ${responseDirectory}    data
    ${snippetCount}    get length    ${dataList}
    [Return]    ${snippetCount}

Login Some Server
    [Arguments]    ${pIp}=${gBackendsIp[0]}    ${pUser}=${gBackendsUser[0]}    ${pPassWord}=${gBackendsPasswd[0]}    ${pCommand}=None    ${pIsSleep}=no
    [Documentation]    | Description | login a server, and support execute a command after login |
    ...    | input parameters |
    ...    | ${pBackendIp} | default:${gBackendsIp[0]} |
    ...    | ${pBackendUser} | default:${gBackendsUser[0]}|
    ...    | ${pBackendPassWord} | default:${gBackendsPasswd[0]} |
    ...    | ${pCommand} | a execute command ,default:None |
    [Tags]    siqi.zeng
    #    login backend
    Open Connection    ${pIp}
    Login    ${pUser}    ${pPassWord}
    run keyword if    "${pCommand}" != "None"    execute command    ${pCommand}
    run keyword if    "${pIsSleep}" != "no"    sleep    2 minutes

Check Result List
    [Arguments]    ${pStandard}    ${pMessage}    @{pResultList}
    [Documentation]    | Description | check the list element, if any element is not ${pStandard}, fail |
    ...    | input | ${pResultList}:result list |
    ...    | | ${pStandard}:the standard element value in list |
    [Tags]    siqi.zeng
    : FOR    ${result}    IN    @{pResultList}
    \    should be equal    ${result}    ${pStandard}    ${pMessage}

Check the Prev Case Result
    [Documentation]    | Description | check the previous case execute status |
    [Tags]    siqi.zeng
    should be equal as strings    ${PREV TEST STATUS}    PASS

V2I Send Request
    [Arguments]    ${pResource}    ${pMethod}    ${pBody}    ${topicPub}    ${pNotiTime}=5
    [Documentation]    | Description | send the request to mosquitto |
    ...    | input parameters |
    ...    | ${pResource} | resource in payload |
    ...    | ${pMethod} | method in payload |
    ...    | ${pBody} | body data in payload |
    ...    | ${pNotiTime} | wait time interval to get the response |
    ...    | return value |
    ...    | ${rMessageId} | message id for the request in payload |
    ...    | ${rResponse} | response corresponding to the request |
    ${rMessageId}    Evaluate    random.randint(200000, 299999)    random
    log    ${topicPub}
    log    ${gTopicSub}
    ${rResponse}    v2i_tester    ${gCloudHostname}    ${gCloudPort}    ${gSslFiles}    ${topicPub}    ${gTopicSub}
    ...    ${gEncodingType}    ${rMessageId}    ${pResource}    ${pMethod}    ${pBody}    ${pNotiTime}
    log    ${rResponse}
    [Return]    ${rMessageId}    ${rResponse}

Login and Mount Resource
    [Arguments]    ${pMountLocalFolder}=${gMountLocalFolder}
    [Documentation]    | Description | mount resource server |
    ...    | input parameters |
    ...    | ${pResourceIp} | default:${gLocalResourcesIp} |
    ...    | ${pRemotePath} | default:${gMountRemoteFolder} |
    ...    | ${pMountLocalFolder} | default:${gMountLocalFolder} |
    [Timeout]    3 minutes
    ${resourceIp}=    set variable if    "${EnvironmentType}"=="local"    ${gLocalResourcesIp}    ${gApacheIp}
    ${remotePath}=    set variable if    "${EnvironmentType}"=="local"    ${gMountLoRemoteFolder}    ${gMountRemoteFolder}
    #    mount source
    Login Some Server
    #    check whether mount resource already, if not mount resources
    ${stdout}    ${rc}    execute command    df -k|grep //${resourceIp}${remotePath}|grep ${pMountLocalFolder}    return_stdout=True    return_rc=True
    run keyword if    '${stdout}' =='' and ${rc}==1    Mount Resource

Backup Test Results
    [Arguments]    @{pOrigResultsPath}
    [Documentation]    | Description | Back up your test results and transfer them to apache server.the backup dir in your own server :~/test_results ; the backup dir under apache server: var/www/html/RDBtestDataForCI/test_results ; you can view the back results via :http://${gLocalResourcesIp}/RDBtestDataForCI/test_results/ \ |
    [Tags]    qin.hu
    ${jiraNOs}    Split    ${testName}    _
    log    ${jiraNOs[0]}
    ${rFolderDate}    Get Specified Time    16
    ${userPath}    Execute Command    cd ~; pwd
    Set Test Variable    ${tResultsPath}    ${userPath}/test_results/${rFolderDate}
    Execute Command with Return Check    mkdir -p \ ${tResultsPath}/${jiraNOs[0]}
    : FOR    ${result}    IN    @{pOrigResultsPath}
    \    log    ${result}
    \    Execute Command with Return Check    cp -r ${result} \ ${tResultsPath}/${jiraNOs[0]}
    ${rFolderDate2}    Get Specified Time    10
    Set Test Variable    ${remotePath}    ${gOrigMountDir}/test_results/${rFolderDate2}
    Comment    Execute Command with Return Check    sshpass -p ${gApachePassword} ssh -o StrictHostKeychecking=no citest@${gApacheIp} \ "mkdir -p ${gOrigMountDir}/test_results/${rFolderDate2}"
    Comment    Execute Command with Return Check    scp -r ${tResultsPath}/* citest@${gApacheIp}:${remotePath}

Backend Normal Tear Down
    [Arguments]    @{pOrigResultsPath}
    [Documentation]    | Description | if case tear down, backup Specified file, if case pass, clear backend server |
    [Tags]    siqi.zeng
    Run Keyword If Test Failed    Backup Test Results    @{pOrigResultsPath}
    Clear Backend Environment

Get Divisions/Nodes Info
    [Arguments]    ${pDataType}    ${pUri}    ${pQueryId}    ${pVersionUri}    ${pDbApiUrl}=${gDbApiUrl}
    [Documentation]    | Description | get divisions or nodes information, return a list contains information |
    ...    | input | ${pDataType} :it should be divisions or nodes |
    ...    | ${pUri} | api uri |
    ...    | ${pQueryId} | divisions of nodes id |
    ...    | ${pDbApiUrl} | default:${gDbApiUrl} |
    [Tags]    siqi.zeng
    ${type}=    set variable if    "${pDataType}"=="divisions"    division_list    node_list
    create session    backend    ${pDbApiUrl}
    #    get latest landmark version
    ${response}    get request    backend    ${pVersionUri}
    should be equal as integers    ${response.status_code}    200    get version from db failed
    ${responseDirectory}    to json    ${response.content}
    ${dataList}    Get From dictionary    ${responseDirectory}    data
    ${version}    Get From dictionary    ${dataList[0]}    version_id
    #    get information
    ${response}    put request    backend    ${pUri}?version_id=${version}    {"${type}":"${pQueryId}"}
    should be equal as integers    ${response.status_code}    200
    ${responseDirectory}    to json    ${response.content}
    ${tDataList}    Get From dictionary    ${responseDirectory}    data
    [Return]    ${tDataList}

Check Devices Online Status
    [Arguments]    @{pDeviceIdList}
    [Documentation]    | Description | give a device id list , check every device online or offline status, if get a offline status, sleep 2 minutes to wait the device message update, after 2 minutes,if device is still offline , Judgment failed |
    ...    | input | @{pDeviceIdList}:device id list |
    [Tags]    siqi.zeng
    : FOR    ${deviceId}    IN    @{pDeviceIdList}
    \    Check Devices Whether Registered    ${deviceId}
    \    ${status}=    Parse Device Status    ${deviceId}
    \    #    if the device is offline, sleep 2 minutes to wait the message update
    \    run keyword if    "${status}"=="offline"    sleep    2 minutes
    \    ${status}=    Parse Device Status    ${deviceId}
    \    should be equal as strings    ${status}    online

Check Devices Whether Registered
    [Arguments]    ${pDeviceId}
    [Documentation]    | Description | give a device id ，check whether registered, if not get registered information for 2 minutes, \ fail |
    ...    | input | ${pDeviceId}:device id |
    [Tags]    siqi.zeng
    : FOR    ${i}    IN RANGE    12
    \    #    get device status code
    \    ${responseList}    run keyword and ignore error    Get API    ${gDbApiUrl}    /devices/${pDeviceId}?cache=false
    \    ${getContent}    get from list    ${responseList}    1
    \    ${getContent}    to json    ${getContent}
    \    ${opsValue}    get from dictionary    ${getContent}    ops
    \    ${codeValue}    get from dictionary    ${opsValue}    code
    \    exit for loop if    ${codeValue}== 200
    \    run keyword if    ${codeValue}==404    sleep    10 s
    \    ${i}=    evaluate    ${i}+1
    should be equal as integers    ${codeValue}    200    api return code(${codeValue}) should be equal as 200, if it is 404,means device did not registered

Connect DB Api
    [Arguments]    ${pUri}    ${pDbApiUrl}=${gDbApiUrl}    ${pPutData}=${EMPTY}
    [Documentation]    | Description | conect the DB Api,return the number of records and data in the table |
    ...    | input parameters |
    ...    | ${pUri} | api uri |
    ...    | ${pDbApiUrl} | default:${gDbApiUrl} |
    ...    | return value |
    ...    | ${rRecordCount} | the number of records |
    ...    | ${rDataList} | the data in the table |
    create session    backend    ${pDbApiUrl}
    ${response}    run keyword if    '${pPutData}'<>'${EMPTY}'    put request    backend    ${pUri}    data=${pPutData}
    ...    ELSE    get request    backend    ${pUri}
    should be equal as integers    ${response.status_code}    200    failed to connect DB Api
    ${responseDirectory}    to json    ${response.content}
    ${opsDirectory}    Get From dictionary    ${responseDirectory}    ops
    @{rDataList}    Get From dictionary    ${responseDirectory}    data
    ${opsCode}    Get From dictionary    ${opsDirectory}    code
    should be equal as integers    ${opsCode}    200    failed to execute DB Api
    ${rRecordCount}    Get Length    ${rDataList}
    [Return]    ${rRecordCount}    @{rDataList}
